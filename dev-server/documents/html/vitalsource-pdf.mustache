<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>VitalSource book reader (PDF)</title>
    <style>
      body {
        font-family: sans-serif;
      }
    </style>
    <script type="module">
      /**
       * Custom element that holds the book content frame. The class name is not
       * important but the `<mosaic-book>` tag name triggers the VitalSource integration.
       */
      class MosaicElement extends HTMLElement {
        constructor() {
          super();
          this.attachShadow({ mode: 'open' });

          // For now there is only one page.
          const pageURLs = [
            '/document/vitalsource-pdf-page'
          ];

          this._chapterIndex = 0;

          const setPage = index => {
            if (index < 0 || index >= pageURLs.length) {
              return;
            }
            this._chapterIndex = index;

            // We remove the current frame and create a new one, rather than just
            // change the `src` of the existing iframe, to mimic what Bookshelf
            // does. The client should be robust to either approach.
            this.contentFrame?.remove();
            this.contentFrame = document.createElement('iframe');
            this.contentFrame.src = pageURLs[this._chapterIndex];
            this.shadowRoot.append(this.contentFrame);
          };

          const styles = document.createElement('style');
          styles.innerHTML = `
            iframe {
              width: 100%;
              height: 800px;
              resize: both;
              overflow: auto;
            }
          `;
          this.shadowRoot.append(styles);

          const controlBar = document.createElement('div');
          this.shadowRoot.append(controlBar);

          setPage(0);
        }

        getBookInfo() {
          return { title: 'Principles of Economics', isbn: '9781938168239', format: 'pbk' };
        }

        getCurrentPage() {
          // The CFI is a reference to the current chapter's entry in the `<spine>`
          // of the EPUB's Package Document. Element references in CFIs are
          // even numbers counting from 2.
          const cfi = `/0`;
          const page = (this._chapterIndex + 1).toString();
          const title = 'Introduction to Choice in a World of Scarcity';
          const url = '/principles-of-economics/pages/1';

          return {
            cfi,
            page,
            chapterTitle: title,
            absoluteURL: url,
            index: this._chapterIndex,
          };
        }

        goToURL(url) {
          const index = chapterURLs.findIndex(cu => cu === url);
          if (index >= 0) {
            this.setChapter(index);
          }
        }
      }
      customElements.define('mosaic-book', MosaicElement);

      // The `window.VST` object must exist in the parent frame, otherwise the
      // `window.innerPageData` variable is not set in the content frame.
      window.VST = {
        PictureBook: {
          contentReady: () => {},
        }
      };
    </script>
  </head>
  <body>
    <h1>Mock VitalSource PDF book</h1>
    <p>
      This page simulates the essential parts of the <a href="https://bookshelf.vitalsource.com">VitalSource
      Bookshelf</a> ebook reader. This example simulates a PDF-based book, referred to as
      a "fixed layout" book in the <a href="https://bookshelf.vitalsource.com/">Bookshelf store</a>.
    </p>

    <p>
      The book content was extracted from a free
      <a href="https://bookshelf.vitalsource.com/reader/books/9781938168239">OpenStax textbook</a>.
      To view the real book in VitalSource, you will first need to add it to your library
      by searching for the book ID (9781938168239) in the Bookshelf store.
    </p>

    <mosaic-book></mosaic-book>

    {{{hypothesisScript}}}
  </body>
</html>
