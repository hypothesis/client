#!/usr/bin/env node


'use strict';var _getIterator2 = require('babel-runtime/core-js/get-iterator');var _getIterator3 = _interopRequireDefault(_getIterator2);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var minimist = require('minimist');
var _ = require('lodash');
var checkDependencies = require('../lib/check-dependencies');

var argv = minimist(process.argv.slice(2));

// camelCase the options
for (var key in argv) {
    var value = argv[key];
    delete argv[key];
    argv[_.camelCase(key)] = value;
}

// Options of type array should always have array values
var _arr = ['scopeList', 'optionalScopeList'];for (var _i = 0; _i < _arr.length; _i++) {var option = _arr[_i];
    if (option in argv) {
        if (!Array.isArray(argv[option])) {
            argv[option] = [argv[option]];
        }
    }
}

// We'll handle verbosity by the CLI here.
var verbose = argv.verbose;
delete argv.verbose;

var Cli = {
    reporter: function reporter(result) {
        if (verbose) {var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {
                for (var _iterator = (0, _getIterator3.default)(result.log), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var msg = _step.value;
                    console.log(msg);
                }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}
        }var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {

            for (var _iterator2 = (0, _getIterator3.default)(result.error), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var _msg = _step2.value;
                console.error(_msg);
            }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}

        if (result.status !== 0) {
            process.exitCode = result.status;
        }
    } };


checkDependencies(argv, Cli.reporter);

module.exports = Cli;
//# sourceMappingURL=cli.js.map
