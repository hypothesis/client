import { addConfigFragment, parseConfigFragment } from '../config-fragment';

describe('shared/config-fragment', () => {
  describe('addConfigFragment', () => {
    it('returns URL with added config fragment', () => {
      const config = { appType: 'bar' };
      const url = addConfigFragment('https://example.com/app.html', config);
      assert.equal(
        url,
        'https://example.com/app.html#config=%7B%22appType%22%3A%22bar%22%7D',
      );
    });

    it('replaces any existing fragment', () => {
      const config = { appType: 'bar' };
      const url = addConfigFragment('https://example.com/app.html#foo', config);
      assert.equal(
        url,
        'https://example.com/app.html#config=%7B%22appType%22%3A%22bar%22%7D',
      );
    });
  });

  describe('parseConfigFragment', () => {
    it('parses fragment generated by `addConfigFragment`', () => {
      const config = { appType: 'foo' };

      const urlWithConfig = addConfigFragment(
        'https://example.com/app.html',
        config,
      );
      const parsedConfig = parseConfigFragment(urlWithConfig);

      assert.deepEqual(parsedConfig, config);
    });

    ['', '#foo'].forEach(fragment => {
      it('returns an empty object if the URL has no config fragment', () => {
        const url = `https://example.com/app.html${fragment}`;
        const parsedConfig = parseConfigFragment(url);
        assert.deepEqual(parsedConfig, {});
      });
    });
  });
});
