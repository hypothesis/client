@use "../../mixins/focus";
@use "../../mixins/layout";
@use "../../mixins/utils";
@use "../../variables" as var;

// Container for the menu toggle button and absolutely positioned elements
// that show the menu content when open.
.menu {
  position: relative;
}

// Toggle button that opens the menu.
.menu__toggle {
  @include focus.outline-on-keyboard-focus;

  display: flex;
  align-items: center;
  height: 100%;

  appearance: none;
  border: none;
  background: none;
  padding: 0;
  color: inherit;

  &:hover {
    transition: 0.2s ease-out;
    color: var.$color-text;
  }
  &[aria-expanded='true'],
  &:hover[aria-expanded='true'] {
    color: var.$color-brand;
  }
}

.menu__toggle-icon {
  @include utils.icon--xsmall;
}

// Triangular indicator next to the toggle button indicating that there is
// an associated drop-down menu.
.menu__toggle-arrow {
  width: 10px;
  height: 10px;
  margin-left: 5px;

  &.is-open {
    // Flip the indicator when the menu is open.
    transform: rotateX(180deg);
    color: var.$color-text;
  }
}

// Triangular indicator at the top of the menu that associates it with the
// toggle button.
.menu__arrow {
  color: var.$grey-3;
  fill: white;

  // Position the arrow so that it appears flush with the right edge of the
  // content when the menu is right-aligned, and the bottom of the arrow just
  // overlaps the content's border. The effect is that the menu's border is a
  // rounded rect with a notch at the top.
  position: absolute;
  top: calc(100% - 2px); // nb. Adjust this if changing the <svg> size.
  right: 0;
  z-index: 2;
}

// Content area of the menu.
.menu__content {
  @include utils.font--large;
  @include utils.border;
  @include utils.shadow;
  background-color: white;
  position: absolute;
  top: calc(100% + 5px);
  z-index: 1;

  &--align-left {
    left: 0;
  }

  &--align-right {
    right: 0;
  }
}
