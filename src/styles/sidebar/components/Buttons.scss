@use "sass:map";
@use "@hypothesis/frontend-shared/styles/mixins/focus";
@use "../variables" as var;

// VARIABLE MAPPING
// This section maps variables from the client's variables to tokens
// consumable by this component's styles
$border-radius: var.$border-radius;
$touch-target-size: var.$touch-target-size;

$color-g1: var.$grey-1;
$color-g2: var.$grey-2;
$color-g3: var.$grey-3;
$color-gsemi: var.$grey-semi;
// grey-4 and grey-5 unused because of contrast requirements
$color-gmid: var.$grey-mid;
$color-g6: var.$grey-6;
$color-g7: var.$grey-7;
$color-brand: var.$color-brand;
$color-link-hover: var.$color-link-hover;

// VARIABLES AND COLOR MAPS
// This section sets up some "local" variables and colormaps (SASS maps
// containing color sets)
$base-sizes: (
  'small': 0.825em,
  'medium': 1em,
  'large': 1.25em,
);

// COLOR MAPS: BASE COLORS
// There are currently two sets (maps) of colors from which button styling
// are derived:
// - $base-colors: Intended for rendering a button on a white background.
// - $base-colors--onGrey: Intended for rendering a button on a light-grey
//   background.
$base-colors: (
  'foreground': $color-gmid,
  'background': $color-g1,
  'hover-foreground': $color-g7,
  'hover-background': $color-g2,
  'active-foreground': $color-g7,
  'active-background': $color-g1,
  'border': transparent,
  'disabled-foreground': $color-gmid,
);

$base-colors--onGrey: (
  'foreground': $color-gmid,
  'background': $color-g2,
  'hover-foreground': $color-g7,
  'hover-background': $color-g3,
  'active-foreground': $color-g7,
  'active-background': $color-g2,
  'border': transparent,
  'disabled-foreground': $color-gmid,
);

// TOKENS AND COLOR MAPS: COLORS for specific Button components
// Each Button component class gets a color map by "extending" the base
// color map as needed

// Icon-only buttons have a transparent background by default, and a more
// visible active (pressed) state
$IconButton-colors: map.merge(
  $base-colors,
  (
    'background': transparent,
    'hover-background': transparent,
    'active-foreground': $color-brand,
    'active-background': transparent,
  )
);

// Allow variant of icon-only button that is visually emphasized
// (always brand-colored, even when not active/pressed)
$IconButton-colors--primary: map.merge(
  $IconButton-colors,
  (
    'foreground': $color-brand,
    'hover-foreground': $color-brand,
    'active-foreground': $color-brand,
  )
);

$LabeledButton-colors: $base-colors;

// This set of colors is light text on dark background
$LabeledButton--primary-colors: map.merge(
  $base-colors,
  (
    'foreground': $color-g1,
    'background': $color-gmid,
    'hover-foreground': $color-g1,
    'hover-background': $color-g6,
    'disabled-foreground': $color-gsemi,
  )
);

// This set of colors is for buttons styled as links on a white background
$LinkButton-colors: map.merge(
  $base-colors,
  (
    'background': transparent,
    'hover-background': transparent,
    'active-background': transparent,
    'hover-foreground': $color-link-hover,
  )
);

// Input buttons are icon-only buttons positioned next to text inputs.
// They have a background color (cf. standard icon buttons) and a border.
$InputButton-colors: map.merge(
  $base-colors,
  (
    'border': $color-g3,
  )
);

// BUTTON MIXINS

// Reset browser native styles. This can be used in conjunction with other
// styles via `base` or standalone for starting a custom button's styles
// from relative scratch
@mixin reset {
  @include focus.outline-on-keyboard-focus;
  // Reset native styles
  padding: 0;
  margin: 0;
  background-color: transparent;
  border-style: none;
}

@mixin hover-state($colormap: $base-colors) {
  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    color: map.get($colormap, 'hover-foreground');
    background-color: map.get($colormap, 'hover-background');
    @content;
  }
  transition: color 0.2s ease-out, background-color 0.2s ease-out,
    opacity 0.2s ease-out;
}

@mixin active-state($colormap: $base-colors) {
  &[aria-expanded='true'],
  &[aria-pressed='true'] {
    color: map.get($colormap, 'active-foreground');
    background-color: map.get($colormap, 'active-background');
    @content;

    &:hover:not([disabled]),
    &:focus:not([disabled]) {
      color: map.get($colormap, 'active-foreground');
      background-color: map.get($colormap, 'active-background');
      @content;
    }
  }
}

// Base mixin for all button-ish components
@mixin base($colormap: $base-colors) {
  @include reset;

  border-radius: $border-radius;
  border: none;
  padding: 0.5em;

  font-size: map.get($base-sizes, 'medium');
  font-weight: 700;
  white-space: nowrap; // Keep multi-word button labels from wrapping

  color: map.get($colormap, 'foreground');
  background-color: map.get($colormap, 'background');

  &--size-small {
    font-size: map.get($base-sizes, 'small');
  }

  &--size-large {
    font-size: map.get($base-sizes, 'large');
  }

  // (icon) SVG sizing is relevant
  svg {
    width: 1.25em;
    height: 1.25em;
  }

  &:disabled {
    color: map.get($colormap, 'disabled-foreground');
  }
}

// Convenience wrapper for a button with active (pressed) and hover states
@mixin baseWithStates($colormap: $base-colors) {
  @include base($colormap);
  @include active-state($colormap);
  @include hover-state($colormap);
}

// Extra mixin for buttons that contain both an icon and label/text content
// to help with aligning the text vs. icon and space between text and icon
@mixin with-icon-and-content($margin: 0.5em) {
  display: flex;
  justify-content: center;
  align-items: center;

  &--icon-left svg {
    margin-right: $margin;
  }

  &--icon-right svg {
    margin-left: $margin;
  }
}

// COMPONENT CLASSES

.IconButton {
  @include baseWithStates($IconButton-colors);
  &--primary {
    @include baseWithStates($IconButton-colors--primary);
  }
  @media (pointer: coarse) {
    min-width: $touch-target-size;
    min-height: $touch-target-size;
  }
}

// An icon-only button with tighter padding (e.g. TopBar icons)
.CompactIconButton {
  @include baseWithStates($colormap: $IconButton-colors);
  &--primary {
    @include baseWithStates($IconButton-colors--primary);
  }
  & svg {
    width: 1em;
    height: 1em;
  }
  padding: 0.25em;
}

// A button with text and no icon
.LabeledButton {
  @include baseWithStates($LabeledButton-colors);
  &--primary {
    @include baseWithStates($LabeledButton--primary-colors);
  }
}

// A button with both text and icon
.LabeledIconButton {
  @include baseWithStates($LabeledButton-colors);
  &--primary {
    @include baseWithStates($LabeledButton--primary-colors);
  }
  @include with-icon-and-content;
}

// A button with both text and icon, tighter padding/internal margins
.CompactLabeledIconButton {
  @include baseWithStates($LabeledButton-colors);
  &--primary {
    @include baseWithStates($LabeledButton--primary-colors);
  }
  @include with-icon-and-content($margin: 0.25em);
  padding: 0.25em 0.5em;
}

// An icon-only button rendered to the right of a text input field
.IconInputButton {
  @include baseWithStates($InputButton-colors);
  // Add a border to line up with input field
  border: 1px solid map.get($InputButton-colors, 'border');
  // Sharp edges to assimilate with input field
  border-radius: none;
  // No border on the left because that's the side adjacent to input field
  border-left: none;
}

// A button styled to appear as a link, with underline on hover
.LinkButton {
  @include base($LinkButton-colors);
  @include hover-state($LinkButton-colors) {
    text-decoration: underline;
  }
  font-weight: 400;
}

// EXAMPLE of Custom Button styling: This is temporary
.TestCustomButton {
  // Custom Button components can define their own color maps
  $custom-colormap: map.merge(
    $base-colors,
    (
      'background': transparent,
      'hover-background': $color-g3,
      'active-background': $color-g3,
    )
  );
  // ...and make use of common Button mixins if so desired
  @include baseWithStates($colormap: $custom-colormap);
}
