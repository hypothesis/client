@use "sass:map";

@use '../variables' as var;
// Button styling for the sidebar extending common button-component styles
@use '../shared/components/buttons';

// Similar to `.LinkButton`, with inline layout (so button can be used
// within text)
.InlineLinkButton {
  @include buttons.LinkButton(
    (
      'inline': true,
    )
  );
  // Custom: The dark variant is used for inline, anchor-like styling and needs
  // to be underlined at all times to match <a> styling near it
  &--dark {
    text-decoration: underline;
  }
}

.PublishControlButton {
  @include buttons.LabeledButton {
    // Border-radius turned off
    &--primary {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  }
}

// This button style has asymmetrical padding. Hold it here to see if
// this kind of padding is useful in other patterns.
.PaginationPageButton {
  @include buttons.LabeledButton {
    padding: var.$layout-space--small var.$layout-space;
  }
}

// An IconButton, but override minimum height/width on touch screen devices
.NonResponsiveIconButton {
  @include buttons.IconButton(
    (
      'responsive': false,
    )
  );
}

// This is for styling an icon-only button that sits to the right of a
// text input field. It is really part of a composite pattern that includes
// both the input and the buttons. At some point this pattern should be
// consolidated.
$input-button-colors: map.merge(
  buttons.colors-for('IconButton'),
  (
    'background': var.$grey-1,
    'hover-background': var.$grey-2,
  )
);

.InputButton {
  $-options: (
    'colormap': $input-button-colors,
    'withVariants': false,
  );
  @include buttons.IconButton($-options) {
    border: 1px solid var.$grey-3;
    border-radius: 0; // Turn off border-radius to align with <input> edges
    border-left: 0; // Avoid double border with the <input>
    padding: var.$layout-space--xsmall var.$layout-space--small;
    &--small {
      padding: var.$layout-space--xxsmall var.$layout-space--xsmall;
    }
  }
}
