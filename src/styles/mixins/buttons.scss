/**
 * Button mixins for use by the `Button` component or any component that wishes
 * to override default `Button`-component styling. These mixins are meant to be
 * applied to `<button>` HTML elements, with an optional contained icon
 * (i.e. `SvgIcon` component or `<svg>` element).
 *
 * To customize default `Button` styling, start with an appropriate button mixin
 * and extend or or override rules as necessary in your component's SCSS module.
 *
 * e.g., let's pretend you wish the `Button` used in `MyComponent`
 * to have a pink background. In `my-component.scss`, you might do something like:
 *
 * .my-component-button {
 *    @include button--labeled;
 *    background-color: pink;
 * }
 *
 * And pass 'my-component-button' as the `className` prop to `Button`.
 */

@use '@hypothesis/frontend-shared/styles/mixins/focus';

@use './layout';
@use './utils';
@use '../variables' as var;

@mixin reset-native-btn-styles {
  @include focus.outline-on-keyboard-focus;

  padding: 0;
  margin: 0;
  background-color: transparent;
  border-style: none;
}

@mixin button-hover {
  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    color: var.$grey-7;
  }
}

/**
 * Basic color, sizing, padding and hover for buttons.
 */
@mixin button {
  @include reset-native-btn-styles;
  @include layout.row(center, center);
  padding: 0.5em;
  border-radius: var.$border-radius;
  border: none;
  transition: color 0.2s ease-out, background-color 0.2s ease-out,
    opacity 0.2s ease-out;

  // Icon
  svg {
    @include utils.icon--medium;
  }
  @include button-hover;
}

/*
 * A button with an icon and no displayed text.
 *
 * @param {boolean} [$with-active-state] - Adds an active state color when pressed / expanded
 * @param {boolean} [$coarse-min-size] - Overrides the minimum height and width in mobile view.
 */
@mixin button--icon-only(
  $with-active-state: true,
  $coarse-min-size: var.$touch-target-size
) {
  @include button;
  color: var.$grey-mid;
  @media (pointer: coarse) {
    min-width: $coarse-min-size;
    min-height: $coarse-min-size;
  }
  @if $with-active-state == true {
    &[aria-expanded='true'],
    &[aria-pressed='true'] {
      color: var.$color-brand;

      &:hover:not([disabled]),
      &:focus:not([disabled]) {
        color: var.$color-brand;
      }
    }
  }
}

/**
 * A button with displayed text. It may or may not have an icon. The default
 * colors assume the button is displayed on a white background.
 *
 * @param {CSSColor} [$background-color] - The button's background color when
 *   neither hovered nor active.
 * @param {CSSColor} [$active-background-color]
 */
@mixin button--labeled(
  $background-color: var.$grey-1,
  $active-background-color: var.$grey-2
) {
  @include button;
  white-space: nowrap; // Keep multi-word button labels from wrapping
  color: var.$grey-mid;
  font-weight: 700;
  background-color: $background-color;

  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    background-color: $active-background-color;
  }

  // Icon
  svg {
    margin: 0 5px 0 0;
  }
}

/**
 * A labeled button that is a primary action.
 */
@mixin button--primary {
  @include button;
  @include button--labeled;
  color: var.$color-text--inverted;
  background-color: var.$grey-mid;

  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    color: var.$color-text--inverted;
    background-color: var.$grey-6;
  }

  &:disabled {
    // Note: this color does not meet WCAG contrast requirements,
    // but is admissable because it is applied to disabled elements
    color: var.$grey-semi;
  }
}
