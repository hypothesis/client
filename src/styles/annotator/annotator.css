/*
Styles for annotator UI elements. This stylesheet is loaded within shadow roots
to avoid affecting the host page. Styles for elements (eg. highlights) which do
not use shadow roots go in other bundles (eg. highlights.css,
pdfjs-overrides.scss).

# Important note about CSS custom @property declarations

Tailwind generates CSS that relies on custom @property declarations. These
declarations are ignored when loaded in Shadow DOM. To work around that we have
logic in `src/annotator/util/shadow-root.ts` to duplicate the properties in the
host page. See shadow-root.ts for more details.
*/

@import 'tailwindcss' source(none);
@config '../../../tailwind-annotator.config.js';

/* Styles for `<hypothesis-*>` elements in the host page.

   `:host` rules have lower precedence than global CSS, unless `!important` is used.
   See https://stackoverflow.com/questions/54821175/. */
:host {
  /* Define the reference font size used by `text-annotator-<size>` utilities.
   
     We try to respect the document's standard font size, but clamp to ensure
     text is always readable. See https://github.com/hypothesis/client/issues/4615. */
  --hypothesis-font-size: 16px; /* Fallback */
  --hypothesis-font-size: clamp(16px, 1rem, 24px);

  /* Our host elements have zero width/height, as they are just containers for
     the shadow roots. Therefore we must override any page styles which would
     cause them to clip their contents. See eg. https://github.com/hypothesis/client/issues/4641. */
  overflow: visible !important;
}

/* Styles for all top-level elements in shadow roots. */
:host > * {
  @apply font-sans;
}

@utility sidebar-transition-margin {
  /* This transition makes the sidebar slide in and off of the screen
     when opening or closing. */
  @apply transition-[margin-left] duration-150 ease-[cubic-bezier(0.55,0,0.2,0.8)];
}

@utility sidebar-transition-visibility {
  /* This transition delays the visibility change to when
     collapsing the sidebar. This serves to delay
     the effect until the sidebar finishes closing. Visibility is
     a boolean value and can not actually animate. */
  @apply invisible transition-[visibility] duration-150;
}

@layer base {
  /* See https://tailwindcss.com/docs/upgrade-guide#default-border-color. */
  * {
    border-color: #dbdbdb;
  }
}

/* See https://tailwindcss.com/docs/upgrade-guide#default-ring-width-and-color. */
@theme {
  --default-ring-width: 2px;
  --default-ring-color: #59a7e8;
}

@layer components {
  .sidebar-container {
    /* Typically applied as an HTML attribute; there is no corresponding
       tailwind utility class */
    direction: ltr;

    /* Full height, fixed position all the way to the right (offscreen) to start */
    @apply fixed top-0 left-full h-full z-max select-none;

    /* Next, set different widths and left-margin positions for different
       breakpoints. */
    @apply annotator-sm:w-[90%] annotator-sm:ml-[-90%];
    @apply annotator-md:w-[70%] annotator-md:ml-[-70%];
    @apply annotator-lg:w-[428px] annotator-lg:ml-[-428px];

    /* Wider screens: apply transition when opening/closing of the sidebar. */
    @apply annotator-lg:sidebar-transition-margin;

    &.is-hidden {
      @apply sidebar-transition-visibility;
    }

    /* We can't use `theme-clean:` or `sidebar-collapsed:` tailwind modifiers
       here because this is the one place in the project where the relevant
       classes are assigned to the same element, not a parent element. */
    &.theme-clean {
      @apply shadow-sidebar;
    }

    &.sidebar-collapsed {
      @apply ml-0;
    }
  }

  /* The sidebar's iframe */
  .sidebar-frame {
    @apply relative border-0 h-full w-full z-3;
    @apply sidebar-collapsed:sidebar-transition-visibility;
  }

  /* This disables the width transition for the sidebar when
     it is manually resized by dragging. */
  .sidebar-no-transition {
    transition: none !important;
  }

  /* Stop inherited values from the parent page from affecting styles in
     Hypothesis UI components.

     Although this is really a utility, it is in the `@components` layer so
     that it can be overridden by utilities applied to the same element.
  */
  .all-initial {
    all: initial;
  }
}
