@use "sass:map";

// Set colors for a button
@mixin _colors($colormap) {
  color: map.get($colormap, 'foreground');
  background-color: map.get($colormap, 'background');

  &:disabled {
    color: map.get($colormap, 'disabled-foreground');
  }
}

// Set hover colors and transition for a button
@mixin _hover-state($colormap) {
  &:hover:not([disabled]) {
    color: map.get($colormap, 'hover-foreground');
    background-color: map.get($colormap, 'hover-background');
  }
  transition: color 0.2s ease-out, background-color 0.2s ease-out,
    opacity 0.2s ease-out;
}

// Set active state colors for a button
@mixin _active-state($colormap) {
  &[aria-expanded='true'],
  &[aria-pressed='true'] {
    color: map.get($colormap, 'active-foreground');
    @if map.get($colormap, 'active-background') {
      background-color: map.get($colormap, 'active-background');
    }

    &:hover:not([disabled]) {
      color: map.get($colormap, 'hover-foreground');
    }

    &:focus:not([disabled]) {
      color: map.get($colormap, 'active-foreground');
    }
  }
}

// Variant mixin: may be be used by variants (BEM modifier classes)
@mixin button--variant($options) {
  @include _colors(map.get($options, 'colormap'));
  @if map.get($options, 'withStates') {
    @include _active-state(map.get($options, 'colormap'));
    @include _hover-state(map.get($options, 'colormap'));
  }
  @content;
}

// Base mixin for buttons.
@mixin button($options) {
  @include _colors(map.get($options, 'colormap'));

  @if map.get($options, 'withStates') {
    @include _active-state(map.get($options, 'colormap'));
    @include _hover-state(map.get($options, 'colormap'));
  }

  border-radius: map.get($options, 'border-radius');
  border: none;
  padding: 0.5em;

  &--small {
    padding: 0.25em;
  }

  &--large {
    padding: 0.75em;
  }

  font-size: 1em;
  font-weight: 700;
  white-space: nowrap; // Keep multi-word button labels from wrapping

  @if map.get($options, 'inline') {
    display: inline;
  } @else {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  @if map.get($options, 'withLayout') {
    &--icon-left svg {
      margin-right: map.get($options, 'margin');
    }

    &--icon-right svg {
      margin-left: map.get($options, 'margin');
    }
    // When a button has "layout", that indicates it has some textual content:
    // Size text to the contextual 1em, and adjust the icon to look balanced.
    // H frontend app buttons tend to apply an icon:text ratio of ~1.25:1
    svg {
      width: 1.25em;
      height: 1.25em;
    }
  } @else {
    // In the case where an icon is the only content in a <button> element,
    // size the icon based on contextual font-size. i.e. the icon IS
    // the content
    svg {
      width: 1em;
      height: 1em;
    }
  }
}
