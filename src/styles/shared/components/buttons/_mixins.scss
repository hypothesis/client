@use "sass:map";

@use "@hypothesis/frontend-shared/styles/mixins/focus";

@use 'config' as c;
@use 'base';

// Basic reset for browser-imposed button styles
@mixin reset {
  @include focus.outline-on-keyboard-focus;
  padding: 0;
  margin: 0;
  background-color: transparent;
  border-style: none;
}

// Base mixin for <button> elements
@mixin Button($options: ()) {
  $defaultOptions: (
    // What colors should be used for this button's styling?
    'colormap': c.$LabeledButton-colors,
    // And for its variants...needed if `withVariants` is true (true is default)
    'colormap--primary': c.$LabeledButton-colors--primary,
    'colormap--dark': c.$LabeledButton-colors--dark,
    'colormap--light': c.$LabeledButton-colors--light,
    // Should this button apply an inline layout? (default is flex)
    'inline': false,
    // Should styling be added for "active" and "hover" states for this <button>?
    'withStates': true,
    // Should styling be added to support the layout of multiple sub-elements
    // of this <button>? Not needed if <button> contains only one child.
    'withLayout': false,
    // Provide styling for light, primary and dark variants? If this is true,
    // make sure all variant colormaps are provided
    'withVariants': true,
    // Internal margin around SVG icon
    'margin': 0.5em,
    'border-radius': 2px
  );
  $-options: map.merge($defaultOptions, $options);

  @include reset;
  @include base.button($options: $-options);

  // Add styles for supported variants as modifier classes, if `withVariants` enabled
  @if (map.get($-options, 'withVariants')) {
    &--light {
      $-light-options: (
        'colormap': map.get($-options, 'colormap--light'),
        'withStates': map.get($-options, 'withStates'),
      );
      @include base.button--variant($-light-options);
    }

    &--primary {
      $-primary-options: (
        'colormap': map.get($-options, 'colormap--primary'),
        'withStates': map.get($-options, 'withStates'),
      );
      @include base.button--variant($-primary-options);
    }

    &--dark {
      $-dark-options: (
        'colormap': map.get($-options, 'colormap--dark'),
        'withStates': map.get($-options, 'withStates'),
      );
      @include base.button--variant($-dark-options);
    }
  }
  @content;
}

// Base mixin for a button with an icon and no label/content. Supports
// variants and sizes. Will assert responsive touch-target sizing in
// --medium (default) and --large variants.
@mixin IconButton($options: ()) {
  $defaultOptions: (
    'colormap': c.$IconButton-colors,
    'colormap--light': c.$IconButton-colors--light,
    'colormap--primary': c.$IconButton-colors--primary,
    'colormap--dark': c.$IconButton-colors--dark,
    'responsive': true,
  );
  $-options: map.merge($defaultOptions, $options);

  @include Button($-options) {
    // Establish a minimum touch-target for touch devices if 'responsive'
    // option is enabled (default). This is not applied to the `--small`
    // size variant.
    @if map.get($-options, 'responsive') {
      @media (pointer: coarse) {
        &--medium,
        &--large {
          min-width: c.$touch-target-size;
          min-height: c.$touch-target-size;
        }
      }
    }
  }

  @content;
}

// Base mixin for a button that has text/content and, optionally, an icon.
// Supports variants and sizes.
@mixin LabeledButton($options: ()) {
  $defaultOptions: (
    'colormap': c.$LabeledButton-colors,
    'colormap--light': c.$LabeledButton-colors--light,
    'colormap--primary': c.$LabeledButton-colors--primary,
    'colormap--dark': c.$LabeledButton-colors--dark,
    'withLayout': true,
  );
  $-options: map.merge($defaultOptions, $options);

  @include Button($-options);

  @content;
}

// Base mixin for a button styled to look like an <a> link. Supports variants
// but not pressed/active states at present.
@mixin LinkButton($options: ()) {
  $defaultOptions: (
    'colormap': c.$LinkButton-colors,
    'colormap--light': c.$LinkButton-colors--light,
    'colormap--primary': c.$LinkButton-colors--primary,
    'colormap--dark': c.$LinkButton-colors--dark,
  );
  $-options: map.merge($defaultOptions, $options);
  @include Button($-options) {
    // Lighter font weight for link-styled buttons
    font-weight: 400;
    // Add an underline on hover
    &:hover:not([disabled]) {
      text-decoration: underline;
    }

    &--primary {
      // Primary variant has bolder text (and also different colors)
      font-weight: 500;
    }
  }

  // Remove padding to allow button to appear flush with surrounding content
  padding: 0;
  @content;
}
